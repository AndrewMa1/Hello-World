面向对象更加适合规模较大的问题
面向对象程序设计(object-oriented programming, OOP),将数据放在首位，程序由对象组成。

*类：class
   类是构造对象的蓝图或模板。由类构造对象的过程称为创建类的实例
   封装：封装将数据和行为组合放在一个包中，其中数据称为实例字段，操作数据的过程称为方法。
   实现封装的关键在于，不能让类中的方法直接访问其他类的实例字段。

*对象：
   对象具备三个主要特性：
       *对象的行为behavior--可以对对象完成哪些操作
	   *对象的状态state--调用方法时，对象会如何相应
	   *对象的标识identity--如何区分具有相同行为与状态的不同对象。
   对象的关键特性会相互影响。每个对象都有唯一的标识。

*类之间的关系：
   类之间最常见的关系：依赖；聚合；继承
   依赖：如果一个类的方法使用或操纵另一个类的对象，就称一个类依赖于另一个类，应尽可能减少类之间的耦合
   聚合：包含关系意味着类A的对象包含类B的对象
   继承：表示一个特殊的类与一个更一般的类之间的关系
   
*使用预定义类：
   *对象与对象变量：
        *构造器constructor：构造新实例。构造器的名字应与类名一致。
		                    要想构造一个对象，需在构造器前面加上new操作符
	    *对象变量：将对象存放在一个变量中，以供多次使用。变量引用对象。

*用户自定义类：
   ***最常见的类定义：
      class ClassName
	  {
	    field1;
		field2;  //这些实例字段最好标记为private，即只有这个class的自身方法才能访问这些实例字段。
		...
		...
		constructor1;
		constructor2;
		...
		...
		method1;
		method2;
	  }
   *多个源文件的使用：
      当存在多个源文件时（每个源文件包含一个类）
	  若想同时编译使用多个源文件，可以使用：javac className*.java
   *用var声明局部变量：只能用于方法中的局部变量。
   *使用null引用：
        用Objects类处理：宽容型：name=Objects.requireNonNullElse(n,"unknown");
		                 严格型：Objects.requireNonNull(n,"the name cannot be null"), name=n;
   *关键词this指示隐式参数

*静态字段与静态方法：
   *静态字段：属于类，不属于任何单个对象
   *静态方法：不在对象上执行的方法，例如：Math.pow(x,a),即没有隐式参数
        *以下两种情况可以使用静态方法：
		      *方法不需要访问对象状态；
			  *方法只需要访问类的静态字段；
   *工厂方法：(factory method)
   *main方法：也是一种静态方法。main方法不对任何对象进行操作

*方法参数：
   *Java采用按值调用，即方法得到的是所有参数值的一个副本(类似于c语言)；
   ***但是，对象引用作为参数时，方法就可以改变参数值了：
            *例如：publis static void tripleSalary(Employee x) 
			      x作为那个对象的的副本，二者一起改变
   *方法不能让一个对象参数引用新的对象

*构造对象：
   *重载：有些类有多个构造器。
        *方法的签名(signature):指定方法名和参数类型。
   *默认字段初始化：
        *如果在构造器中没有显示地为字段设置初值，那么会被自动地赋为默认值：0，false，null；
   **利用关键字this调用另一个构造器：
        *例：public Employee(double s)
		     {
			    this("Employee #"+nextId,s);
				nextId++;
			 } //这样调用Employee(100)时，将调用Employee(String,double)构造器。
   *初始化块：直接写代码块，前面不加public,则无论使用哪个构造器，块内的对象都会初始化。
 
*文档注释：
   *注释的插入：/** .... */ ，包含标记以及之后紧跟着的自由格式文本。标记以@开始。
   *类注释：放在import语句之后，类定义之前
   *方法注释：
        *@param description: 这个标记给当前方法的参数部分添加一个条目
		*@return description: 这个标记给当前方法添加返回部分。
		*@throws class description: 这个标记将添加一个注释，表示这个方法有可能抛出异常
   *字段注释
   *通用注释：
        *@since text：建立一个since条目
		*@author name：建立一个author条目
		*@version text：建立一个版本条目
		*@see或@link：使用超链接
		
*类设计技巧：
    *保证数据私有
	*对数据进行初始化
	*不用在类中使用过多的基本类型
	*分解有过多职责的类
	*类名和方法名要能体现他们的职责：
	    *类名应当是一个名词
		*访问器方法用小写get开头(如getSalary)
		*更改器方法用小写set开头(如setSalary)
	*优先使用不可变的类



   

   